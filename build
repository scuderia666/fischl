#!/bin/sh

set -e

err() { echo $@; exit 1; }

if [[ ! -f out/xvo ]] || [[ -n $@ ]]; then
	if ! command -v v &> /dev/null; then
		err "please install v"
	fi

	mkdir -p out
	v src -o out/xvo
fi

if [[ ! -f out/xvo ]]; then
	err "couldnt build xvo"
fi

build_toolchain() {
	export PATH=$PWD/out/toolchain/bin:$PATH

	build() {
		./out/xvo build $@ \
			-root %pwd/out/rootfs \
			-toolchain %pwd/out/toolchain \
			-pkg %pwd/tools/pkg \
			-stuff %pwd/tools/stuff \
			-dl %pwd/out/toolchain_dl \
			-bl %pwd/out/toolchain_build \
			-scripts %pwd/scripts \
			-target %arch-linux-musl \
			-nopackage yes \
			-debug yes
	}

	build binutils
	build linux-headers
	build gcc-static
	build musl
	build gcc
}

action() {
	export PATH=$PWD/out/toolchain/bin:$PATH

	local action=$1
	shift;
	./out/xvo $action $@ \
		-root %pwd/out/rootfs \
		-toolchain %pwd/out/toolchain \
		-pkg %pwd/pkg \
		-stuff %pwd/stuff \
		-dl %pwd/out/dl \
		-bl %pwd/out/build \
		-scripts %pwd/scripts \
		-target %arch-linux-musl \
		-config %pwd/toolchain/config \
		-stage 0 \
		-rebuild yes \
		-debug yes
}

emerge() {
	action emerge $@
}

remove() {
	action remove $@
}

build_system() {
	#emerge kernel-headers gcc3 musl patch busybox binutils make bsdtar
	emerge musl
}

main() {
	case $1 in
		system) build_system ;;
		toolchain) build_toolchain ;;
		remove) shift; remove $@ ;;
		*) emerge $@ ;;
	esac

	shift $((OPTIND -1))
}

main $@
